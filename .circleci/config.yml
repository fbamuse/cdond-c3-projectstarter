version: 2.1
parameters:
  WorkflowID:
    type: string
    default: "1"
  ID:
    type: string
    default: "1"
  

orbs:
  slack: circleci/slack@3.4.2


### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:

  build-frontend:
    environment:
      CODE: 123
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: build frontend
          command: |
            cd frontend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [ frontend/node_modules]
          key: frontend-build
      - run:
          name: on error
          command: echo "build frontend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  build-backend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build backend
          command: |
            cd backend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [ backend/node_modules]
          key: backend-build
      - run:
          name: on error
          command: echo "build backend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  test-frontend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            echo $CODE
            npm install
            npm run test
      - save_cache:
          paths: [ frontend/node_modules]
          key: frontend-build
      - run:
          command: |
            mkdir -p ~/f_reports
          when: always
      - store_test_results:
          path: ~/f_reports
      - run:
          name: on error
          command: echo "test frontend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"



  test-backend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            echo $CODE
            npm install
            npm run test
      - save_cache:
          paths: [ backend/node_modules]
          key: backend-
      - run:
          command: |
            mkdir -p ~/b_reports
          when: always
      - store_test_results:
          path: ~/b_reports
      - run:
          name: on error
          command: echo "test backend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:        
          name: analyze frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"


  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:        
          name: analyze backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
#      - run: yum -y install tar gzip
      - run:
          name: backend_infrastructure
          command: |
            aws cloudformation deploy \
              --region ap-northeast-1 \
              --template-file  .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: frontend_infrastructure
          command: |
            aws cloudformation deploy \
              --region ap-northeast-1 \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: cloudfront_infrastructure
          command: |
            aws cloudformation deploy \
              --region ap-northeast-1 \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" 



      - run:
          name: "Get the instance ip address for backend"
          command: |
             aws_hosts=$(aws --region ap-northeast-1 ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text)
             echo $aws_hosts
             curl -H "Content-Type: text/plain" -H "token: c3920663-0eac-4f65-b600-6c42c191040a" --request PUT --data ${aws_hosts} https://api.memstash.io/values/backendip
         
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [5f:d8:4c:b2:cb:6c:73:b9:e7:d5:05:d0:07:24:04:2a] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add curl
      - run:
          name: Get the instance ip address for backend 
          command: |
            echo "[backend]" > inventory
            curl -H "token: c3920663-0eac-4f65-b600-6c42c191040a" --request GET https://api.memstash.io/values/backendip  >> inventory
            cat  inventory   
      - run:
          name: Configure server with ansible
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
        
            ansible-playbook -i inventory  .circleci/ansible/main.yml





#  build-frontend:

#  test-frontend:

#  est-backend:

#  can-frontend:

#  scan-backend:

#  deploy-infrastructure:

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  my_workflow:
    jobs:
#      - build-frontend
#      - test-frontend:
#          requires:
#            - build-frontend
#      - analyze-frontend:
#          requires:
#            - test-frontend
          
#      - build-backend
#      - test-backend:
#          requires:
#            - build-backend
#      - analyze-backend:
#          requires:
#            - test-backend

#      - get_instance_ip 
#      - configure_infrastructure:
#          requires:
#            - get_instance_ip        

      - configure_infrastructure

#      - create_infrastructure
#      - configure_infrastructure:
#          requires:
#            - create_infrastructure
 



#     - create_infrastructure_cloudfront     
 #     - create_infrastructure_frontend

