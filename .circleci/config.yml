version: 2.1
parameters:
  WorkflowID:
    type: string
    default: "1"
  ID:
    type: string
    default: "1"

orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    description: Destroy the backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environment
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: c3920663-0eac-4f65-b600-6c42c191040a" --request GET https://api.memstash.io/values/<< pipeline.id >>_migrations)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...


jobs:

  build-frontend:
    environment:
      CODE: 123
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: build frontend
          command: |
            cd frontend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [ frontend/node_modules]
          key: frontend-build
      - run:
          name: on error
          command: echo "build frontend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  build-backend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build backend
          command: |
            cd backend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [ backend/node_modules]
          key: backend-build
      - run:
          name: on error
          command: echo "build backend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  test-frontend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            echo $CODE
            npm install
            npm run test
      - save_cache:
          paths: [ frontend/node_modules]
          key: frontend-build
      - run:
          command: |
            mkdir -p ~/f_reports
          when: always
      - store_test_results:
          path: ~/f_reports
      - run:
          name: on error
          command: echo "test frontend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"



  test-backend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            echo $CODE
            npm install
            npm run test
      - save_cache:
          paths: [ backend/node_modules]
          key: backend-
      - run:
          command: |
            mkdir -p ~/b_reports
          when: always
      - store_test_results:
          path: ~/b_reports
      - run:
          name: on error
          command: echo "test backend Error!"
          when: on_fail
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:        
          name: analyze frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"


  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:        
          name: analyze backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/status:
          success_message: ':ok:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Success!'
          failure_message: ':ng:\nRepository: $CIRCLE_PROJECT_REPONAME\nBranch: $CIRCLE_BRANCH\nPull Requests: $CIRCLE_PULL_REQUESTS\nDeploy Failure!'
          webhook: "${SLACK_WEBHOOK}"

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
#      - run: yum -y install tar gzip
      - run:
          name: backend_infrastructure
          command: |
            aws cloudformation deploy \
              --region ap-northeast-1 \
              --template-file  .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: frontend_infrastructure
          command: |
            aws cloudformation deploy \
              --region ap-northeast-1 \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
 
      - destroy-environment



  get_ips:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Get the instance ip address for backend"
          command: |
             aws_hosts=$(aws --region ap-northeast-1 ec2 describe-instances  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output=text)
             echo $aws_hosts
             curl -H "Content-Type: text/plain" -H "token: c3920663-0eac-4f65-b600-6c42c191040a" --request PUT --data ${aws_hosts} https://api.memstash.io/values/backendip
         
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [5f:d8:4c:b2:cb:6c:73:b9:e7:d5:05:d0:07:24:04:2a] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add curl
            apk add openssh-client
      - run:
          name: Get the instance ip address for backend 
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
            echo "timeout=20">> ansible.cfg
            cat ansible.cfg

            echo "[all]" > inventory.txt
            curl -H "token: c3920663-0eac-4f65-b600-6c42c191040a" --request GET https://api.memstash.io/values/backendip  >> inventory.txt
            cat  inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 20m
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
          
            ansible-playbook -i inventory.txt  .circleci/ansible/main.yml 
      - destroy-environment

#  run-migrations:
  run_db_migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run: 
         cd backend && npm install
      - run: 
          name: Run database migrations 
          command: |
            touch migration_results.txt
            cd backend && npm run migrations > migration_results.txt
      - run:
          name: Save result value
          command: |
            cd backend
            if grep "executed successfully" migration_results.txt
            then
            curl -H "Content-Type: text/plain" -H "token:c3920663-0eac-4f65-b600-6c42c191040a" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
            curl -H "Content-Type: text/plain" -H "token:c3920663-0eac-4f65-b600-6c42c191040a" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache sudo
            apk add --no-cache bash
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://$BACKEND_IP:3030
            echo "API_URL=$API_URL" > frontend/.env
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build

            cd dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - destroy-environment
      - revert-migration

  build_copy_backend_files:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
 #     - run: apk --no-cache add curl
      - run: apk add --no-cache --upgrade bash
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add curl
            apk add openssh-client
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
            echo "timeout=20">> ansible.cfg
            cat ansible.cfg

            echo "[all]" > inventory.txt
            curl -H "token: c3920663-0eac-4f65-b600-6c42c191040a" --request GET https://api.memstash.io/values/backendip  >> inventory.txt
            cat  inventory.txt
          fingerprints: [5f:d8:4c:b2:cb:6c:73:b9:e7:d5:05:d0:07:24:04:2a] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Copy files to server
          no_output_timeout: 60m
          command: | 
            printenv >> ./backend/.env
            cat ./backend/.env
            ansible-playbook -i inventory.txt  .circleci/ansible/copy_deploy.yml
      - destroy-environment
      - revert-migration

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Smoke test backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "${BACKEND_IP}"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-ap-northeast-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migration

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
 #         fingerprints: [5f:d8:4c:b2:cb:6c:73:b9:e7:d5:05:d0:07:24:04:2a]    
 #     - run:
 #         name: Install dependencies
 #         command: |
 #           apk add --update nodejs npm curl bash
      - run:
          name: cloudfront_infrastructure
          command: |
            aws cloudformation deploy \
              --region ap-northeast-1 \
              --template-file  .circleci/files/cloudfront.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}  \
              --tags project=udapeople
   #   - run:
 #       name: cloudfront_infrastructure
 #       command: |
 #         set TERM=xterm
 #         export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==${CIRCLE_WORKFLOW_ID:0:7}].Value" --no-paginate --output text)
 #         echo Old Workflow Id: "${OldWorkflowID}"
 #         if [ -n "${OldWorkflowID}" ]
 #         then
 #         echo "Update existing CloudFront stack"
 #         aws cloudformation update-stack  \
 #           --stack-name udapeople-cloudfront \
 #           --template-body file://./.circleci/files/cloudfront.yml \
 #           --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
 #           --tags 'Key=project,Value=udapeople'
 #         else              
 #         echo "Create CloudFront stack"
 #         aws cloudformation create-stack  \
 #           --stack-name udapeople-cloudfront \
 #           --template-body file://./.circleci/files/cloudfront.yml \
 #           --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
 #           --tags 'Key=project,Value=udapeople'  
 #         fi
      - run:
          name: Promote CloudFront distribution and clean up old resources
          command: |
            set  WorkflowID = ${CIRCLE_WORKFLOW_ID:0:7}
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Old Workflow Id: "$OldWorkflowID"
            echo "$STACKS[*]"
            if echo "$STACKS[*]" | grep -Eq "$OldWorkflowID" 
            then
              echo "${OldWorkflowID}"
              echo "This is the bucket: "
              echo udapeople-${OldWorkflowID}
              echo "This is the bucket url: "
              echo "s3://udapeople-${OldWorkflowID}"
            fi
            if [ -n "${OldWorkflowID}" ]
            then
              echo Cleanup old S3 bucket frontend and backend stack
              aws s3 rm s3://udapeople-frontend-${OldWorkflowID}/ --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}          
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
            fi

workflows:
  my_workflow:
    jobs:
      - build-frontend
      -  test-frontend:
            requires:
            - build-frontend
      - analyze-frontend:
          requires:
            - test-frontend
          
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - analyze-backend:
          requires:
            - test-backend
          
      - create_infrastructure:
          requires: [analyze-backend, analyze-frontend]

      - get_ips:
              requires:
                - create_infrastructure

      - configure_infrastructure:
          requires:
            - get_ips 

      - run_db_migrations:
          requires:
            - configure_infrastructure

      - deploy-frontend: 
          requires:
            - run_db_migrations

      - build_copy_backend_files:
          requires:
            - run_db_migrations

      - smoke-test:
            requires: [build_copy_backend_files,deploy-frontend]
      - cloudfront-update:
            requires: 
              - smoke-test




          
#    - get_ips
#    - build_copy_backend_files :
#            requires:
#              - get_ips
#
#    - smoke-test:
#          requires:
#            - build_copy_backend_files



       

 


